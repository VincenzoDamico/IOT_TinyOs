[
    {
        "id": "4524aab60525fcb7",
        "type": "tab",
        "label": "Project IoT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a87be5aaf844852",
        "type": "mqtt in",
        "z": "4524aab60525fcb7",
        "name": "",
        "topic": "sensors/telosB",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "407a01e4.6b637",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "0e2c08d6304d7705",
                "604b71730f92dfb0",
                "37bf02a76c09f6ef"
            ]
        ]
    },
    {
        "id": "0e2c08d6304d7705",
        "type": "debug",
        "z": "4524aab60525fcb7",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 460,
        "wires": []
    },
    {
        "id": "37bf02a76c09f6ef",
        "type": "link out",
        "z": "4524aab60525fcb7",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "aa72c25775608b20"
        ],
        "x": 705,
        "y": 360,
        "wires": []
    },
    {
        "id": "aa72c25775608b20",
        "type": "link in",
        "z": "4524aab60525fcb7",
        "name": "link in 2",
        "links": [
            "37bf02a76c09f6ef"
        ],
        "x": 875,
        "y": 300,
        "wires": [
            [
                "7c612d580d6354bf"
            ]
        ]
    },
    {
        "id": "7c612d580d6354bf",
        "type": "function",
        "z": "4524aab60525fcb7",
        "name": "Format for Firebase",
        "func": "let message = msg.payload;\nmsg.payload = {\n    temperature: message.temperature,\n    humidity: message.humidity,\n    luminosity: message.luminosity,\n};\n\nmsg.url = \"https://iot-environmental-14e42-default-rtdb.europe-west1.firebasedatabase.app/baseStation/3/\"+\n    message.idSensor + \"/\" + message.timestamp+\".json\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "57c64e382f7aec1b",
                "8e639f35a6d1fc05"
            ]
        ]
    },
    {
        "id": "57c64e382f7aec1b",
        "type": "debug",
        "z": "4524aab60525fcb7",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 360,
        "wires": []
    },
    {
        "id": "8e639f35a6d1fc05",
        "type": "http request",
        "z": "4524aab60525fcb7",
        "name": "",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{url}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "604b71730f92dfb0",
        "type": "function",
        "z": "4524aab60525fcb7",
        "name": "Parse & Normalize",
        "func": "// Check if msg.payload exists and is an object\nif (!msg.payload || typeof msg.payload !== \"object\") {\n    node.error(\"msg.payload is missing or not an object\", msg);\n    return null;\n}\n\nlet data = msg.payload;\n\n// Check that the critical fields are present\nif (typeof data.idSensor === \"undefined\" || typeof data.timestamp === \"undefined\") {\n    node.error(\"El payload no contiene 'idSensor' o 'timestamp'\", msg);\n    return null;\n}\n\n// Validate timestamp format before converting\nlet timestamp = data.timestamp;\nif (typeof timestamp !== \"string\" || !timestamp.includes(\"\")) {\n    node.error(\"timestamp tiene un formato inv√°lido: \" + timestamp, msg);\n    return null;\n}\n\n\n\nmsg.sensorId = data.idSensor;\nmsg.timestamp = timestamp.replace(\"_\",\"T\")+\"Z\";\n\nmsg.temperature = data.temperature;\nmsg.humidity = data.humidity;\nmsg.luminosity = data.luminosity;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "2f333edee11d6fae"
            ]
        ]
    },
    {
        "id": "2f333edee11d6fae",
        "type": "function",
        "z": "4524aab60525fcb7",
        "name": "Format for InfluxDB",
        "func": "msg.payload = [\n  {\n    temperature: msg.temperature,\n    humidity: msg.humidity,\n    luminosity: msg.luminosity\n  },\n  {\n    node: msg.sensorId.toString()\n  }\n];\n\nmsg.timestamp=msg.timestamp;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "5301f599c35b7e44",
                "45151bde28f0ffc8"
            ]
        ]
    },
    {
        "id": "5301f599c35b7e44",
        "type": "debug",
        "z": "4524aab60525fcb7",
        "name": "Debug InfluxDB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 260,
        "wires": []
    },
    {
        "id": "45151bde28f0ffc8",
        "type": "influxdb out",
        "z": "4524aab60525fcb7",
        "influxdb": "influx_v2",
        "name": "InfluxDB Write",
        "measurement": "baseStationData",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "iot-museum",
        "bucket": "iot-museum-bucket",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "407a01e4.6b637",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "influx_v2",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB v2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    }
]
